" don't forget to :PlugInstall when you add something
call plug#begin('~/.vim/plugged')

"because fish is really good but lots of vim stuff doesn't work with it"
set shell=/bin/bash 

Plug 'tpope/vim-sensible'

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'airblade/vim-rooter'
Plug 'vim-airline/vim-airline'

Plug 'Valloric/YouCompleteMe'
Plug 'ervandew/supertab'
Plug 'ctrlpvim/ctrlp.vim'

Plug 'ternjs/tern_for_vim'
Plug 'scrooloose/syntastic'

Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'OmniSharp/omnisharp-vim'
Plug 'pprovost/vim-ps1'
Plug 'fsharp/vim-fsharp', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}

Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'

Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/vim-easy-align'
Plug 'mattn/emmet-vim'

Plug 'altercation/vim-colors-solarized'
call plug#end()


" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']

" Fonts
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=InputMono\ ExLight:h12
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
  :set guioptions-=m  "remove menu bar
  :set guioptions-=T  "remove toolbar
  :set guioptions-=r  "remove right-hand scroll bar
  :set guioptions-=L  "remove left-hand scroll bar
endif

" ------------------------------------------------------------------
" Solarized Colorscheme Config
" ------------------------------------------------------------------
let g:solarized_visibility="high"    "default value is normal
let g:solarized_hitrail=1    "default value is 0
set background=dark
colorscheme solarized
" ------------------------------------------------------------------

" airline
let g:airline_powerline_fonts=1
" show branch in airline
let g:airline#extensions#branch#enabled = 1

" Filetype defaults
if has("autocmd")
  autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
  autocmd FileType cfg setlocal shiftwidth=4 tabstop=4 expandtab
  autocmd FileType ruby setlocal shiftwidth=2 tabstop=2 expandtab
  autocmd FileType vim setlocal shiftwidth=2 tabstop=2 expandtab
  autocmd FileType markdown setlocal shiftwidth=4 tabstop=4 expandtab
  autocmd FileType json setlocal shiftwidth=2 tabstop=2
  autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
  autocmd FileType sql setlocal shiftwidth=2 tabstop=2
  autocmd FileType ps1 setlocal shiftwidth=4 tabstop=4 expandtab
  autocmd FileType fsharp setlocal shiftwidth=4 tabstop=4 expandtab
  autocmd FileType groovy setlocal shiftwidth=4 tabstop=4 expandtab
  autocmd FileType conf setlocal shiftwidth=2 tabstop=2 expandtab

  "fugitive autoclean transient buffers
  autocmd BufReadPost fugitive://* set bufhidden=delete
endif

"For efficient #+movement, show relative numbers
set relativenumber
if has("autocmd")
  autocmd InsertEnter * :set number
  autocmd InsertLeave * :set relativenumber
endif


" CtrlP config
let g:ctrlp_working_path_mode = 'r'


"""""""""
" MAPPINGS

" Split line. ctrl-c while in insert mode
imap <C-c> <CR><Esc>O

" Mash j and w in either order to get back to normal mode from insert
imap wj <Esc>
imap jw <Esc>

" quicker window nav
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Since q lets you exit NERDTree, let's do this to get back
:nnoremap <leader>q :NERDTree<cr>
:nnoremap <leader>n :NERDTreeToggle<cr>

"Quick shortcuts for editing vimrc
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

"Convert to unix lineendings with a keystroke
:nnoremap <leader>lu :set ff=unix<cr>
:nnoremap <leader>lw :set ff=win<cr>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" CtrlP ignore items listed in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

" Follow symlink to the real file; useful for fugutive
nnoremap <Leader>L :<C-u>execute 'file '.fnameescape(resolve(expand('%:p')))<bar>
    \ call fugitive#detect(fnameescape(expand('%:p:h')))<CR>
